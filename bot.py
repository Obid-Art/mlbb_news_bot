import json
import asyncio
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
logging.basicConfig(level=logging.INFO)

TOKEN = "7922676476:AAEApJ7cZdcHR9LoOlO6TaeVymIRcGOfyFg"
SUBSCRIBERS_FILE = "subscribers.json"

def load_subscribers():
    if not os.path.exists(SUBSCRIBERS_FILE):
        return []
    with open(SUBSCRIBERS_FILE, "r") as f:
        return json.load(f)

def save_subscribers(users):
    with open(SUBSCRIBERS_FILE, "w") as f:
        json.dump(users, f)

# üîß –ó–∞–≥–ª—É—à–∫–∏, –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_telegram_news():
    return {
        "title": "üî• Telegram-–Ω–æ–≤–æ—Å—Ç—å",
        "summary": "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞.",
        "link": "https://t.me/MLBBNews_sng"
    }

def get_official_mlbb_news():
    return {
        "title": "üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å",
        "summary": "–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
        "link": "https://m.mobilelegends.com/ru/news"
    }

# üë§ –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ—Å—Ç–∏ MLBB. –ù–∞–ø–∏—à–∏ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    users = load_subscribers()
    if user_id not in users:
        users.append(user_id)
        save_subscribers(users)
        await update.message.reply_text("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ MLBB.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    users = load_subscribers()
    if user_id in users:
        users.remove(user_id)
        save_subscribers(users)
        await update.message.reply_text("üîï –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.")
    else:
        await update.message.reply_text("–¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")

# üì∞ –ö–æ–º–∞–Ω–¥–∞ news ‚Äî –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¢ Telegram", callback_data="news_telegram")],
        [InlineKeyboardButton("üåê –û—Ñ–∏—Ü. –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data="news_official")]
    ])
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=keyboard)

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "news_telegram":
        news = get_telegram_news()
    elif query.data == "news_official":
        news = get_official_mlbb_news()
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    text = f"üì∞ <b>{news['title']}</b>\n\n{news['summary']}\n\nüîó <a href=\"{news['link']}\">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å", url=news['link'])]])

    await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=keyboard)

# üîÑ –§–æ–Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–æ—Å—Ç–∞–≤–∏–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def send_news_periodically(app: Application):
    while True:
        await asyncio.sleep(3600)

# ‚ñ∂ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))
    app.add_handler(CommandHandler("news", news))
    app.add_handler(CallbackQueryHandler(button_handler))

    async def run():
        app.create_task(send_news_periodically(app))
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤.")
        await app.run_polling()

    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(run())